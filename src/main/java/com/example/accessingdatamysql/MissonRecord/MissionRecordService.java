package com.example.accessingdatamysql.MissonRecord;

import com.example.accessingdatamysql.Mission.Mission;
import com.example.accessingdatamysql.Mission.MissionRepository;
import com.example.accessingdatamysql.Mission.MissionService;
import com.example.accessingdatamysql.Security.JwtUtil;
import com.example.accessingdatamysql.User.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cglib.core.Local;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;

@Service
public class MissionRecordService {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MissionRecordRepository missionRecordRepository;

    @Autowired
    private MissionRepository missionRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private JwtUtil jwtUtil;

    public String addMissionRecord(MissionRecordRequest request){
        MissionRecord n = new MissionRecord();

        n.setUserId(request.getUserId());
        n.setMissionId(request.getMissionId());
        n.setDate(request.getDate());

        missionRecordRepository.save(n);
        return "Saved";
    }

    public void generateMissionRecords(Mission mission){
        String week_data = mission.getWeekData();
        LocalDate start_date = mission.getStartDate();
        Integer user_id = mission.getUserId();

        List<MissionRecord> records = new ArrayList<>();

        // 56일 이후의 데이터까지 일단 저장.
        for(int i = 0; i < 56; i++){
            LocalDate currentDate = start_date.plusDays(i);
            int dayOfWeek = currentDate.getDayOfWeek().getValue();

            if(week_data.charAt(dayOfWeek - 1) == '1'){
                MissionRecord record = new MissionRecord();
                record.setDate(currentDate);
                record.setMissionId(mission.getId());
                record.setUserId(user_id);
                record.setCompleted(false);
                records.add(record);
            }
        }
        missionRecordRepository.saveAll(records);
    }

    // 유저의 전체 레코드를 리턴함.
    public List<MissionRecordsFetchResponse> fetchMissionRecords(String token){
        // 리턴값.
        List<MissionRecordsFetchResponse> responses = new ArrayList<>();

        // 유저가 가진 레코드들.
        List<MissionRecord> records = getMissionRecordsByToken(token);

        for(MissionRecord record : records){
            MissionRecordsFetchResponse response = addResponse(record);

            responses.add(response);
        }

        return responses;
    }

    // 유저의 레코드 중 date에 해당하는 값만 리턴함.
    public List<MissionRecordsFetchResponse> fetchMissionRecords(String token, LocalDate date){
        List<MissionRecordsFetchResponse> responses = new ArrayList<>();

        // 유저가 가진 레코드들.
        List<MissionRecord> records = getMissionRecordsByToken(token);

        for(MissionRecord record : records){
            if(record.getDate().isEqual(date)) {
                MissionRecordsFetchResponse response = addResponse(record);

                responses.add(response);
            }
        }

        return responses;
    }


    // 토큰에 해당하는 유저의 모든 record들을 가져옴.
    private List<MissionRecord> getMissionRecordsByToken(String token){
        // email -> user_id 찾기, mission을 찾고 이를 바탕으로 데이터를 넘겨준다.
        String email = jwtUtil.extractEmail(token);
        Integer userId = userRepository.findByEmail(email).getId();

        return getMissionRecordsByUserId(userId);
    }

    // record 안에 있는 값으로 MissionRecord를 생성.
    private MissionRecordsFetchResponse addResponse(MissionRecord record){
        MissionRecordsFetchResponse response = new MissionRecordsFetchResponse();
        response.setId(record.getId());
        response.setMissionId(record.getMissionId());
        String missionName = missionRepository.findById(record.getMissionId())
                .map(Mission::getMission) // Mission 객체에서 Mission 이름 가져오기
                .orElseThrow(() -> new NoSuchElementException("Mission not found for ID: " + record.getMissionId()));
        response.setMission(missionName);
        response.setDate(record.getDate());
        response.setCompleted(record.getCompleted());

        return response;
    }

    // 특정 record를 completed 처리함.
    public String completeMissionRecord(String token, Integer mission_record_id){
        return null;
    }

    public List<MissionRecord> getMissionRecordsByUserId(Integer user_id){
        return missionRecordRepository.findAllByUserId(user_id);
    };

}
