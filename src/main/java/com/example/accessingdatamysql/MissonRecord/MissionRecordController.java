package com.example.accessingdatamysql.MissonRecord;

import com.example.accessingdatamysql.Mission.MissionRepository;
import com.example.accessingdatamysql.Mission.MissionService;
import com.example.accessingdatamysql.Security.JwtUtil;
import com.example.accessingdatamysql.User.UserRepository;
import com.example.accessingdatamysql.Mission.Mission;
import io.swagger.v3.oas.annotations.Operation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;


import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;

@Controller // This means that this class is a Controller
@RequestMapping(path="/mission_record") // This means URL's start with /demo (after Application path)
public class MissionRecordController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MissionRecordRepository missionRecordRepository;

    @Autowired
    private MissionRepository missionRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private JwtUtil jwtUtil;

    @Autowired
    private MissionRecordService missionRecordService;

    @Autowired
    private MissionService missionService;

    @PostMapping(path="/add")
    @Operation(summary = "사용자가 미션을 완수하면 해당 미션을 db에 저장함", description = "Parameter로 token, mission, date를 받아서 db에 저장한다")// Map ONLY POST Requests
    public @ResponseBody String addMissionRecord (@RequestBody MissionRecordRequest request) {
        return missionRecordService.addMissionRecord(request);
    }

    @GetMapping(path="/all")
    @Operation(summary="모든 사용자의 완수된 mission 기록들을 불러옴", description = "id, user_id, mission_id, date을 Iterable<MissionRecord> 타입으로 리턴한다")
    public @ResponseBody Iterable<MissionRecord> getAllMissionRecords() {
        // This returns a JSON or XML with the users
        return missionRecordRepository.findAll();
    }

    @GetMapping(path = "/fetch")
    public @ResponseBody List<MissionRecordsFetchResponse> fetchMissionRecords(@RequestParam String token){
        return missionRecordService.fetchMissionRecords(token);
    }

    @GetMapping(path = "/test")
    public @ResponseBody MissionRecord testfetch(@RequestParam String token){
        // email -> user_id 찾기, mission을 찾고 이를 바탕으로 데이터를 넘겨준다.
        String email = jwtUtil.extractEmail(token);
        Integer userId = userRepository.findByEmail(email).getId();

        // 리턴값.
        List<MissionRecordsFetchResponse> response = new ArrayList<>();

        // 유저가 가진 레코드들.
        List<MissionRecord> records = missionRecordService.getMissionRecordsByUserId(userId);

        for(MissionRecord record : records){
            return record;
//            MissionRecordsFetchResponse n = new MissionRecordsFetchResponse();
//            n.setId(record.getId());
//            n.setMissionId(record.getMissionId());
//            String missionName = missionRepository.findById(record.getMissionId())
//                    .map(Mission::getMission) // Mission 객체에서 Mission 이름 가져오기
//                    .orElseThrow(() -> new NoSuchElementException("Mission not found for ID: " + record.getMissionId()));
//            n.setMission(missionName);
//            n.setDate(record.getDate());
//            n.setCompleted(record.getCompleted());
//
//            response.add(n);
        }
        return null;
    }
}