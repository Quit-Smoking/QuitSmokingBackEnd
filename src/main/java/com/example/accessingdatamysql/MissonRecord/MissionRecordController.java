package com.example.accessingdatamysql.MissonRecord;

import com.example.accessingdatamysql.Mission.MissionRepository;
import com.example.accessingdatamysql.Security.JwtUtil;
import com.example.accessingdatamysql.User.UserRepository;
import com.example.accessingdatamysql.Mission.Mission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;


import java.time.LocalDate;

@Controller // This means that this class is a Controller
@RequestMapping(path="/mission_record") // This means URL's start with /demo (after Application path)
public class MissionRecordController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MissionRecordRepository missionRecordRepository;

    @Autowired
    private MissionRepository missionRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private JwtUtil jwtUtil;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addMissionRecord (@RequestParam String token, @RequestParam Mission mission, @RequestParam LocalDate date) {
        MissionRecord n = new MissionRecord();

        String email = jwtUtil.extractEmail(token);
        Integer user_id = userRepository.findByEmail(email).getId();
        Integer mission_id = mission.getId();

        n.setUserId(user_id);
        n.setMissionId(mission_id);
        n.setDate(date);

        missionRecordRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<MissionRecord> getAllMissionRecords() {
        // This returns a JSON or XML with the users
        return missionRecordRepository.findAll();
    }
}